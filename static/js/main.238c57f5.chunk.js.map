{"version":3,"sources":["components/TreeTable/utils/tree.util.js","components/TreeTable/utils/tree-table.util.js","components/TreeTable/TreeTable.js","App.js","serviceWorker.js","index.js"],"names":["flatListToTree","items","roots","childrenMap","i","length","item","parentId","visible","children","push","id","createRows","rows","columns","currentRow","level","path","toggleFn","toggleMap","isDisplay","isOpen","key","startsWith","rowTds","map","col","index","style","width","renderContent","startOfRow","x","react_default","a","createElement","className","btnToggleClassName","btnToggle","onClick","render","tdContent","tableRow","TreeTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onToggleClick","toggleId","objectSpread","state","setState","closeAll","openAll","name","row","Component","defaultProps","priority","from","subject","sentDate","value","readOnly","alert","App","isCloseAll","_this2","treeTable","components_TreeTable_TreeTable","ref","instance","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.238c57f5.chunk.js","sourcesContent":["export const flatListToTree = (items) => {\n\tif (!items) {\n\t\treturn null;\n\t}\n\tconst roots = [];\n\tconst childrenMap = {}; // parentId => list of children\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst item = items[i];\n\t\tif (!item.parentId) {\n\t\t\titem.visible = true;\n\t\t\troots.push(item);\n\t\t} else {\n\t\t\titem.visible = true;\n\t\t\tlet children = childrenMap[item.parentId] || [];\n\t\t\tchildren.push(item);\n\t\t\tchildrenMap[item.parentId] = children;\n\t\t}\n\t}\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst item = items[i];\n\t\titem.children = childrenMap[item.id];\n\t}\n\n\treturn roots;\n};\n","import React from 'react';\n\nexport const createRows = (rows, columns, currentRow, level, path, toggleFn, toggleMap) => {\n\tpath += currentRow.id + '-';\n\ttoggleMap[path] = !!toggleMap[path] || false;\n\n\tlet isDisplay = true;\n\tlet isOpen = true;\n\tfor (let key in toggleMap) {\n\t\tif (toggleMap[key] === true) {\n\t\t\tif (path.startsWith(key) && path !== key) {\n\t\t\t\tisDisplay = false;\n\t\t\t}\n\t\t\tif (path === key) {\n\t\t\t\tisOpen = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet rowTds = columns.map((col, index) => {\n\t\tlet style = {};\n\t\tif (col.width) {\n\t\t\tstyle = {width: col.width};\n\t\t}\n\t\tlet startOfRow = [];\n\t\tif (index === 0) {\n\t\t\tfor (let x = 0; x < level; x++) {\n\t\t\t\tstartOfRow.push(<span key={x} className={ 'tree-table-space-block'} ><i /></span>);\n\t\t\t}\n\t\t\tif (currentRow.children) {\n\t\t\t\tlet btnToggleClassName = 'tree-table-space-block btn-toggle';\n\t\t\t\tif (!isOpen) {\n\t\t\t\t\tbtnToggleClassName += ' is-close';\n\t\t\t\t}\n\t\t\t\tlet btnToggle = <span\n\t\t\t\t\tkey={'btn-toggle'}\n\t\t\t\t\tclassName={btnToggleClassName}\n\t\t\t\t\tonClick={() => toggleFn(path)}\n\t\t\t\t>{isOpen ? '-' : '+'}</span>;\n\t\t\t\tstartOfRow.push(btnToggle);\n\t\t\t} else {\n\t\t\t\tstartOfRow.push(<span key={'last-block'} className=\"tree-table-space-block last-block\"><i /></span>);\n\t\t\t}\n\t\t}\n\t\tlet renderContent;\n\t\tif (col.render) {\n\t\t\trenderContent = col.render(currentRow);\n\t\t} else {\n            renderContent = currentRow[col.key]\n\t\t}\n\n\t\tconst tdContent = <span className={'tree-table-td-content'}>{renderContent}</span>;\n\t\treturn (\n\t\t\t<td\n\t\t\t\tkey={col.key}\n\t\t\t\tstyle={style}\n\t\t\t>{startOfRow}{tdContent}</td>\n\t\t);\n\t});\n\tconst tableRow = isDisplay && <tr key={currentRow.id}>{rowTds}</tr>;\n\trows.push(tableRow);\n\n\tif (!currentRow.children) {\n\t\treturn;\n\t}\n\tlevel++;\n\tfor (let i = 0; i < currentRow.children.length; i++) {\n\t\tconst row = currentRow.children[i];\n\t\tcreateRows(rows, columns, row, level, path, toggleFn, toggleMap);\n\t}\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {flatListToTree} from './utils/tree.util';\nimport {createRows} from './utils/tree-table.util';\n\nclass TreeTable extends Component {\n\tstatic defaultProps = {\n\t\titems: [],\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\troots: flatListToTree(this.props.items),\n\t\t\ttoggleMap: {}\n\t\t};\n\t}\n\n    componentDidMount() {\n\t\tif (this.props.closeAll) {\n            this.closeAll();\n\t\t}\n\t}\n\n\tonToggleClick = (toggleId) => {\n\t\tconst toggleMap = {...this.state.toggleMap};\n\t\ttoggleMap[toggleId] = !toggleMap[toggleId];\n\t\tthis.setState({toggleMap});\n\t};\n\n\tcloseAll = () => {\n\t\tconst toggleMap = {...this.state.toggleMap};\n\t\tfor (let key in toggleMap) {\n\t\t\ttoggleMap[key] = true;\n\t\t}\n\t\tthis.setState({toggleMap});\n\t};\n\n\topenAll = () => {\n\t\tconst toggleMap = {...this.state.toggleMap};\n\t\tfor (let key in toggleMap) {\n\t\t\ttoggleMap[key] = false;\n\t\t}\n\t\tthis.setState({toggleMap});\n\t};\n\n\trender() {\n\t\tconst columns = this.props.columns.map(col => {\n\t\t\tlet style = {};\n\t\t\tif (col.width) {\n\t\t\t\tstyle = {width: col.width};\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<th\n\t\t\t\t\tkey={col.key}\n\t\t\t\t\tstyle={style}\n\t\t\t\t>{col.name}</th>\n\t\t\t);\n\t\t});\n\n\t\tlet rows = [];\n\t\tfor (let i = 0; i < this.state.roots.length; i++) {\n\t\t\tconst row = this.state.roots[i];\n\t\t\tcreateRows(rows,\n                this.props.columns,\n\t\t\t\trow,\n\t\t\t\t0,\n\t\t\t\t'',\n\t\t\t\tthis.onToggleClick,\n\t\t\t\tthis.state.toggleMap);\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"tree-table-wrap\">\n\t\t\t\t<table className=\"tree-table\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{columns}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{rows}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nTreeTable.propTypes = {\n\titems: PropTypes.array,\n\tcolumns: PropTypes.array,\n\tcloseAll: PropTypes.bool\n};\n\nexport default TreeTable;\n","import React, { Component } from 'react';\nimport TreeTable from './components/TreeTable/TreeTable';\n\nconst items = [\n  {\n    id: 1,\n    priority: <span>1</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'Lorem Ipsum is simply dummy text of the printing',\n    sentDate: '01/01/2019'\n  },\n  {\n    id: 2,\n    priority: <span>2</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 1\n  },\n  {\n    id: 3,\n    priority: <span>3</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 1\n  },\n  {\n    id: 4,\n    priority: <span>4</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 3\n  },\n  {\n    id: 5,\n    priority: <span>5</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019'\n  },\n  {\n    id: 6,\n    priority: <span>6</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019'\n  },\n  {\n    id: 7,\n    priority: <span>7</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 3\n  },\n  {\n    id: 8,\n    priority: <span>8</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 3\n  },\n  {\n    id: 9,\n    priority: <span>9</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 3\n  },\n  {\n    id: 10,\n    priority: <span>10</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 8\n  },\n  {\n    id: 11,\n    priority: <span>11</span>,\n    from: 'reacttreetable@simple.com',\n    subject: 'It is a long established fact that a reader will be distracted',\n    sentDate: '01/01/2019',\n    parentId: 8\n  },\n    {\n        id: 12,\n        priority: <span>12</span>,\n        from: 'reacttreetable@simple.com',\n        subject: 'It is a long established fact that a reader will be distracted',\n        sentDate: '01/01/2019',\n        parentId: 10\n    },\n    {\n        id: 13,\n        priority: <span>13</span>,\n        from: 'reacttreetable@simple.com',\n        subject: 'It is a long established fact that a reader will be distracted',\n        sentDate: '01/01/2019',\n        parentId: 5\n    },\n    {\n        id: 14,\n        priority: <span>14</span>,\n        from: 'reacttreetable@simple.com',\n        subject: 'It is a long established fact that a reader will be distracted',\n        sentDate: '01/01/2019',\n        parentId: 5\n    }];\n\nconst columns = [\n  {\n    key: 'id',\n    name: \"#\",\n  },\n  {\n    key: 'from',\n    name: \"From\",\n    width: '200px',\n  },\n  {\n    key: 'subject',\n    name: \"Subject\",\n  },\n  {\n    key: 'sentDate',\n    name: \"Sent date\",\n    width: '150px',\n      render: (row) => {\n        return <input value={row.sentDate} readOnly={true}/>\n    }\n  },\n  {\n    key: 'action',\n    name: \"##\",\n    width: '100px',\n    render: (row) => {\n        return <button onClick={() => alert(row.id)}>Click me</button>\n    }\n  }\n];\n\nclass App extends Component {\n  state = {isCloseAll: false};\n\n  render() {\n    return (\n        <div className=\"page-container\">\n          <button className=\"btn\" onClick={() => this.treeTable.closeAll()}>Close all</button>\n          <button className=\"btn\" onClick={() => this.treeTable.openAll()}>Open all</button>\n          <TreeTable\n              items={items}\n              columns={columns}\n              closeAll={true}\n              ref={instance => { this.treeTable = instance; }}\n          />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}